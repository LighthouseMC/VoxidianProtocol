use proc_macro2::{Ident, TokenStream};
use serde::{de::DeserializeOwned, Serialize};
use quote::{quote, ToTokens};
use syn::parse_file;
use voxidian_protocol::value::{Biome, DamageType};

mod block_states;
mod reports;
mod packets;
mod items;
mod entity_types;
mod sounds;
mod attributes;

fn main() {
    packets::make_packets();
    block_states::make_block_states();
    reports::make_components();
    items::make_items();
    entity_types::make_entities();
    sounds::make_sounds();
    attributes::make_attrs();

    make_data_file::<DamageType>("DamageType", "../datagen/generated/data/minecraft/damage_type", "../src/autogenerated/damage_types.rs");
    make_data_file::<Biome>("Biome", "../datagen/generated/data/minecraft/worldgen/biome", "../src/autogenerated/biomes.rs");
}

pub(crate) fn format_token_stream<T: ToTokens + ToString>(tokens: &T) -> String {
    let str = tokens.to_string().replace("\\\"", "\"");
    let syn_ast = parse_file(&str).unwrap();
    let formatted = prettyplease::unparse(&syn_ast);

    formatted
}

fn make_data_file<T: Serialize + DeserializeOwned + ToTokens>(ty: &str, directory: &str, out_file: &str) {
    let data = generate_data::<T>(ty, directory);
    std::fs::write(out_file, format_token_stream(&data)).unwrap();
}

fn generate_data<T: Serialize + DeserializeOwned + ToTokens>(ty: &str, directory: &str) -> TokenStream {
    let ty = Ident::new(ty, proc_macro2::Span::call_site());
    let mut stream = quote! {
        let mut registry = Registry::new();
    };
    for entry in std::fs::read_dir(directory).unwrap() {

        let entry = entry.unwrap();
        let path = entry.path();
        println!("Generating data for: {:?}", path);
        let file_name = path.file_name().unwrap().to_str().unwrap().to_string().replace(".json", "");
        let file_contents = std::fs::read_to_string(path).unwrap();
        let value = serde_json::from_str::<T>(&file_contents).unwrap();

        stream.extend(quote! {
            registry.insert(Identifier::new("minecraft", #file_name), #value);
        });
    };
    quote! {
        use crate::packet::*;

        impl #ty {
            #[allow(dead_code)]
            #[allow(redundant_semicolons)]
            pub fn vanilla_registry() -> Registry<#ty> {
                #stream;
                registry
            }
        }
    }
}