use proc_macro2::TokenStream;

use crate::{format_token_stream, reports::get_reports_json};

pub fn make_sounds() {
    let json = make_sounds_to_json();
    let tokens = make_sounds_tokens(json);
    let fmt = format_token_stream(&tokens);

    std::fs::write("../src/autogenerated/sounds.rs", fmt).unwrap();
}

pub(crate) fn make_sounds_to_json() -> Vec<(String, u32)> {
    let mut registries = get_reports_json();
    let items = registries.map.get_mut("minecraft:sound_event").unwrap();
    let mut vc = items.entries
        .iter()
        .map(|(name, entry)| {
            (name.clone(), entry.protocol_id)
        })
        .collect::<Vec<_>>();
    vc.sort_by_key(|x| x.1);
    vc
}

pub fn make_sounds_tokens(item_entries: Vec<(String, u32)>) -> TokenStream {
    let mut stream = TokenStream::new();
    for entry in item_entries {
        let name = entry.0.replace("minecraft:", "");
        stream.extend(quote::quote! {
            registry.insert(Identifier::vanilla_const(#name), SoundEvent { name: Identifier::vanilla_const(#name), fixed_range: None });
        });
    }
    quote::quote! {
        use crate::packet::*;

        impl SoundEvent {
            #[allow(dead_code)]
            #[allow(redundant_semicolons)]
            pub fn vanilla_registry() -> Registry<SoundEvent> {
                let mut registry = Registry::new();
                #stream
                registry
            }
        }
    }
}
